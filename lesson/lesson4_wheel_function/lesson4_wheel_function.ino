//----------------------------
// LESSON4：ホイールを1つ回す。関数の練習
//
// 2023-07-13 ohguma 初版
//----------------------------
// Arduino Mega 拡張基板
// https://github.com/ohguma/mega_board
//
// ■ピン設定
// モータードライバ TOSHIBA TB67H450FNG
// https://toshiba.semicon-storage.com/info/TB67H450FNG_datasheet_ja_20201126.pdf?did=65345&prodName=TB67H450FNG
//   IN1   IN2   OUT1  OUT2  動作
//   ----  ----  ----  ----  -----------------
//   0     0     OFF   OFF   停止（モーター端子が接続されていない状態）
//   数値  0     ＋    －    時計回り（OUT1が電源＋、OUT2が電源－に接続される）
//   0     数値  －    ＋    反時計回り（OUT2が電源＋、OUT1が電源－に接続される）
//   数値  数値  －    －    ショートブレーキ（モーター端子を短絡した状態）
//
// ※最大4つのモータードライバは、IN1/IN2 に Arduino Mega のそれぞれ以下を
//   接続している。
//     MT1  D2/D3
//     MT2  D4/D5
//     MT3  D6/D7
//     MT4  D8/D9
//
// ※モーターの＋端子に赤線、反対側には黒線をハンダ付けし、XHコネクタには電
//   池ボックスと同じ向きに赤線・黒線を差し込むこと。
//   （コネクタの▲マークに赤線を接続する。）
//   このとき、モータードライバのOUT1にモーターの＋端子、OUT2には反対側端子
//   が接続される。
//
// ※モーターは＋端子に電池のプラス、反対側にマイナスを接続すると、ギヤを取
//   り付ける側からモーターを見た場合に、通常モーター軸が時計回りする。
//   ギヤボックスを使う場合は内部のギヤの組み合わせにより、出力軸がモーター
//   軸とは逆に回る場合がある。
//
// ※Arduino Megaでは数値はanalogWrite()の0～255で指定する。
//   0を指定した時が0%、255を指定した時が100%。
//
// MT1を使用する場合は、MegaのD2,D3を使用する。
const int PIN_IN1 = 2;
const int PIN_IN2 = 3;

void setup() {
  setup_wheel();
}

void loop() {
  int j = 0;
  // ホイール時計回り。約1秒でだんだん早くする。
  for (j = 0; j <= 255; j++) {
    rotate_wheel(j);
    delay(4);  //少し待つ。4ミリ秒
  }
  // ホイール時計回り。約1秒でだんだん遅くする。

  // ホイール反時計回り。約1秒でだんだん早くする。

  // ホイール反時計回り。約1秒でだんだん遅くする。

  // 停止して1秒待機
  rotate_wheel(0);
  delay(1000);
}


// ホイール準備
void setup_wheel() {
  pinMode(PIN_IN1, OUTPUT);
  pinMode(PIN_IN2, OUTPUT);
}

// ホイールを回転させる
// 引数 pwm : analogWrite()で使用するPWM値。
//            範囲は -255 <= pwm <= 255
//            ０以上で時計回り、マイナスで反時計回りとする。
void rotate_wheel(int pwm) {
  if (pwm >= 0) {
    analogWrite(PIN_IN1, pwm);  //ピン指定は適宜調整する
    analogWrite(PIN_IN2, 0);
  } else {
    //alalogWrite()でセットするPWM値はプラスの値のみ
    analogWrite(PIN_IN1, 0);
    analogWrite(PIN_IN2, fabs(pwm)); // - pwm でも等価
  }
}

//  ■課題
//  (1) 「Arduinoを始めよう」の「Arduino 公式リファレンス」で以下を調べる。
//    ・for 文
//    ・analogWrite()
//    ・関数
//    ・map()
//    ・constrain()
//    ・#include
//
//  (2) 先のLESSON3と同じようにモーターが動作するよう loop() 内で下記のコメ
//      ント箇所を補足する。
//        ・モーター軸時計回り。約1秒でだんだん遅くする。
//        ・モーター軸反時計回り。約1秒でだんだん早くする。
//        ・モーター軸反時計回り。約1秒でだんだん遅くする。
//
// (3) 関数 rotate_wheel() の引数をパーセントで指定するよう修正する。
//     その際、loop() 中で rotate_wheel() を呼び出す for 文や、for 文中の
//     delay() で指定する値も修正すること。
//       [ヒント] rotate_wheel() 内で、-100～100で指定された引数の値を
//                map() で -255～255の範囲の値に変換して analogWrite() で使
//                用する。
//       [ヒント] -100～100の範囲外の値が指定された場合でも問題が起きないよ
//                うに constrain() を使用して下記の安全対策を取っておくこと。
//                ・-100より小さい場合は、-100が指定されたことにする。
//                ・100より大きい場合は、100が指定されたことにする。
//
//     ※Arduino Megaでは数値はanalogWrite()の0～255(8bit)で指定するが、別の
//       マイコンでは0～1023(10bit)や0～4095(12bit)で指定することもある。
//       パーセント指定で関数を呼ぶようにしておけば、マイコンを切り替えた時
//       でも、loop() 側のメイン処理はそのままで、関数側の変換内容を修正する
//       だけで対応できる。
//
// (4) 関数 setup_wheel() と rotate_wheel() の定義部分と、そこで使用するピン
//     指定を別ファイルに分割してみること。コメントも適宜移動する。
//     Arduino IDE で今開いているスケッチに新しいタブを追加し、ファイル名を
//     wheel.h とする場合、今のスケッチの冒頭に下記を記載すると、別ファイル
//     の内容を今のスケッチに取り入れることができる。
//         #include "wheel.h"
//
//     ※#includeの文末にはセミコロン不要。
//
//     ※プログラムの再利用や管理が容易になる上に、メインスケッチの見通しも
//       良くなるので機能ごとにファイルを分割しておくことを勧める。
//